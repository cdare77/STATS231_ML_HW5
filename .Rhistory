pokemon_split <- initial_split(pokemon, prop = 0.7, strata = type_1)
pokemon_train <- training(pokemon_split)
pokemon_test <- testing(pokemon_split)
# 5-fold cross validation
pokemon_folds  <- vfold_cv(pokemon_train, v = 5, strata = type_1)
# Verify that the training and testing sets have the correct number of observations
data.frame(train = c(count(pokemon_train)), test = c( count(pokemon_test) )) %>% rename( Train = n, Test = n.1)
# Hot-One the legendary predictor
pokemon_train$is_legendary <- as.numeric(pokemon_train$legendary) - 1
pokemon_train %>%
select(where(is.numeric)) %>%
cor() %>%
corrplot(type = 'lower', diag = FALSE,
method = 'color')
# Get rid of 'dummy' column for one-hot encoding since we only
# use that for the corrplot in this assignment
pokemon_train <- subset(pokemon_train, select=-is_legendary)
pokemon_recipe <-
recipe(type_1 ~ legendary + generation + sp_atk + attack + speed + defense + hp + sp_def, data = pokemon_train) %>%
step_dummy(legendary) %>%
step_dummy(generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
prep(pokemon_recipe) %>% bake(new_data = pokemon_train)
elastic_net_model <- multinom_reg(mixture = tune(),
penalty = tune()) %>%
set_engine("glmnet")
elastic_net_wflow <- workflow() %>%
add_model(elastic_net_model) %>%
add_recipe(pokemon_recipe)
elastic_net_grid <- grid_regular(penalty(range=c(0.01, 3), trans = identity_trans()),
mixture(range(0,1)),
levels = 10)
random_forest_model <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("classification")
random_forest_wflow <- workflow() %>%
add_model(random_forest_model) %>%
add_recipe(pokemon_recipe)
random_forest_grid <- grid_regular(mtry(range = c(1, 8)),
trees(range = c(200,700)),
min_n(range = c(1,16)),
levels = 8)
load("tuned_grids/elastic_net_tune.rda")
load("tuned_grids/random_forest_tune.rda")
g1<-autoplot(elastic_net_tune) + ggtitle("Elastic Net") + theme_dark()
ggplotly(g1)
g2 <- autoplot(random_forest_tune)
pp2 <- ggplot(g2$data, aes(x = value, y = mean, group = `# Trees`, color = `# Trees`)) +
geom_path() +
geom_point(size = 1) +
facet_grid(`.metric` ~ `Minimal Node Size`, scales = "free_y",  labeller = label_both) +
labs(x = paste(unique(g2$data$name)),
y = "") +
ggtitle("Random Forest") +
theme_dark() +
theme(text = element_text(size = 6))
ggplotly(pp2)
random_forest_final_wflow <- select_best(random_forest_tune , metric="roc_auc" ) %>%
finalize_workflow(x=random_forest_wflow)
random_forest_fit  <- fit(random_forest_final_wflow , pokemon_train)
random_forest_fit %>% extract_fit_parsnip() %>%
vip()
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res
# random_forest_test_res %>%
#   roc_curve(type_1 , .pred_Fire ) %>%
#   autoplot()
random_forest_test_res %>%
conf_mat(truth = type_1, estimate = .pred_class) %>%
autoplot(type = "heatmap")
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res
random_forest_test_res %>%
roc_curve(type_1 , .pred_Fire ) %>%
autoplot()
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res
random_forest_test_res %>%
roc_curve(type_1 , .pred_Fire ) %>%
autoplot()
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res
random_forest_test_res %>%
roc_curve(type_1 , .pred_Bug:.pred_Other ) %>%
autoplot()
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res
random_forest_test_res %>%
roc_curve(type_1 , .pred_Bug:.pred_Other ) %>%
autoplot()
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res
random_forest_test_res %>%
roc_curve(type_1 , c(.pred_Bug, .pred_Fire, .pred_Normal, .pred_Grass, .pred_Psychic, .pred_Water) ) %>%
autoplot()
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res
random_forest_test_res %>%
roc_curve(type_1 , c(.pred_Bug, .pred_Fire, .pred_Normal, .pred_Grass, .pred_Psychic, .pred_Water, .pred_Other) ) %>%
autoplot()
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res %>%
roc_curve(type_1 , c(.pred_Bug, .pred_Fire, .pred_Normal, .pred_Grass, .pred_Psychic, .pred_Water, .pred_Other) ) %>%
autoplot()
load("tuned_grids/elastic_net_tune.rda")
load("tuned_grids/random_forest_tune.rda")
g1<-autoplot(elastic_net_tune) + ggtitle("Elastic Net") + theme_dark()
ggplotly(g1)
g2 <- autoplot(random_forest_tune)
pp2 <- ggplot(g2$data, aes(x = value, y = mean, group = `# Trees`, color = `# Trees`)) +
geom_path() +
geom_point(size = 1) +
facet_grid(`.metric` ~ `Minimal Node Size`, scales = "free_y",  labeller = label_both) +
labs(x = paste(unique(g2$data$name)),
y = "") +
ggtitle("Random Forest") +
theme_dark() +
theme(text = element_text(size = 6))
ggplotly(pp2)
random_forest_final_wflow <- select_best(random_forest_tune , metric="roc_auc" ) %>%
finalize_workflow(x=random_forest_wflow)
random_forest_final_wflow
random_forest_fit  <- fit(random_forest_final_wflow , pokemon_train)
random_forest_fit %>% extract_fit_parsnip() %>%
vip()
load("tuned_grids/elastic_net_tune.rda")
load("tuned_grids/random_forest_tune.rda")
g1<-autoplot(elastic_net_tune) + ggtitle("Elastic Net") + theme_dark()
ggplotly(g1)
select_best(elastic_net_tune , metric="roc_auc" ) %>%
finalize_workflow(x=elastic_net_wflow)
random_forest_final_wflow <- select_best(random_forest_tune , metric="roc_auc" ) %>%
finalize_workflow(x=random_forest_wflow)
random_forest_fit  <- fit(random_forest_final_wflow , pokemon_train)
random_forest_fit %>% extract_fit_parsnip() %>%
vip()
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res %>%
roc_curve(type_1 , c(.pred_Bug, .pred_Fire, .pred_Normal, .pred_Grass, .pred_Psychic, .pred_Water, .pred_Other) ) %>%
autoplot()
random_forest_test_res %>%
conf_mat(truth = type_1, estimate = .pred_class) %>%
autoplot(type = "heatmap")
random_forest_test_res %>%
conf_mat(truth = type_1, estimate = .pred_class) %>%
autoplot(type = "heatmap")
random_forest_test_res
random_forest_test_res %>%
conf_mat(truth = type_1, estimate = .pred_class) %>%
autoplot(type = "heatmap")
random_forest_test_res %>% select(.pred_class + type_1)
random_forest_test_res %>%
conf_mat(truth = type_1, estimate = .pred_class) %>%
autoplot(type = "heatmap")
random_forest_test_res %>% select(.pred_class, type_1)
random_forest_test_res %>%
conf_mat(truth = type_1, estimate = .pred_class) %>%
autoplot(type = "heatmap")
random_forest_test_res %>% select(.pred_class, type_1, x)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(ranger) # Random forests
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(vip)
library(yardstick)
library(themis)
library(janitor)
library(plotly) # Used in several of the rotating carousels for interactive plots
tidymodels_prefer()
conflicted::conflicts_prefer(yardstick::rsq)
set.seed(3435)
set.seed(3435)
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res %>%
roc_curve(type_1 , c(.pred_Bug, .pred_Fire, .pred_Normal, .pred_Grass, .pred_Psychic, .pred_Water, .pred_Other) ) %>%
autoplot()
random_forest_test_res %>% select(.pred_class, type_1, x) %>% filter(TRUE)
random_forest_test_res %>% select(.pred_class, type_1, x) %>% filter(tolower(.pred_class) != tolower(type_1))
random_forest_test_res %>% select(.pred_class, type_1, x) %>% filter(.pred_class != type_1)
random_forest_test_res %>% select(.pred_class, type_1, x)
random_forest_test_res %>%
conf_mat(truth = type_1, estimate = .pred_class) %>%
autoplot(type = "heatmap")
set.seed(3435)
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res %>%
roc_curve(type_1 , c(.pred_Bug, .pred_Fire, .pred_Normal, .pred_Grass, .pred_Psychic, .pred_Water, .pred_Other) ) %>%
autoplot()
random_forest_test_res %>%
conf_mat(truth = type_1, estimate = .pred_class) %>%
autoplot(type = "heatmap")
random_forest_test_res %>% select(.pred_class, type_1, x)
set.seed(3435)
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res %>%
roc_curve(type_1 , c(.pred_Bug, .pred_Fire, .pred_Normal, .pred_Grass, .pred_Psychic, .pred_Water, .pred_Other) ) %>%
autoplot()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(ranger) # Random forests
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(vip)
library(yardstick)
library(themis)
library(janitor)
library(plotly) # Used in several of the rotating carousels for interactive plots
tidymodels_prefer()
conflicted::conflicts_prefer(yardstick::rsq)
set.seed(3435)
pokemon <- read.csv("data/Pokemon.csv") %>% clean_names()
pokemon %>%
head(30) %>%
kable() %>%
kable_styling(full_width = F) %>%
scroll_box(width = "100%", height = "200px")
p<- ggplot(pokemon, aes(x=type_1)) + geom_bar() +
labs(x="Primary Type") + theme_gray() + theme(axis.text.x=element_text(angle=45,hjust=1,vjust=0.5))
ggplotly(p)
# Convert type_1 and legendary to factors
pokemon <- pokemon %>%
mutate(type_1=factor(type_1)) %>%
mutate(legendary=factor(legendary)) %>%
mutate(generation=factor(generation))
pokemon$type_1 <- fct_collapse(pokemon$type_1, Other=c("Steel", "Rock", "Poison", "Ice",
"Ground", "Ghost","Flying", "Fighting",
"Fairy","Electric","Dragon","Dark"))
set.seed(3435)
pokemon_split <- initial_split(pokemon, prop = 0.7, strata = type_1)
pokemon_train <- training(pokemon_split)
pokemon_test <- testing(pokemon_split)
# 5-fold cross validation
pokemon_folds  <- vfold_cv(pokemon_train, v = 5, strata = type_1)
# Verify that the training and testing sets have the correct number of observations
data.frame(train = c(count(pokemon_train)), test = c( count(pokemon_test) )) %>% rename( Train = n, Test = n.1)
# Hot-One the legendary predictor
pokemon_train$is_legendary <- as.numeric(pokemon_train$legendary) - 1
pokemon_train %>%
select(where(is.numeric)) %>%
cor() %>%
corrplot(type = 'lower', diag = FALSE,
method = 'color')
# Get rid of 'dummy' column for one-hot encoding since we only
# use that for the corrplot in this assignment
pokemon_train <- subset(pokemon_train, select=-is_legendary)
pokemon_recipe <-
recipe(type_1 ~ legendary + generation + sp_atk + attack + speed + defense + hp + sp_def, data = pokemon_train) %>%
step_dummy(legendary) %>%
step_dummy(generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
prep(pokemon_recipe) %>% bake(new_data = pokemon_train)
elastic_net_model <- multinom_reg(mixture = tune(),
penalty = tune()) %>%
set_engine("glmnet")
elastic_net_wflow <- workflow() %>%
add_model(elastic_net_model) %>%
add_recipe(pokemon_recipe)
elastic_net_grid <- grid_regular(penalty(range=c(0.01, 3), trans = identity_trans()),
mixture(range(0,1)),
levels = 10)
random_forest_model <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("classification")
random_forest_wflow <- workflow() %>%
add_model(random_forest_model) %>%
add_recipe(pokemon_recipe)
random_forest_grid <- grid_regular(mtry(range = c(1, 8)),
trees(range = c(200,700)),
min_n(range = c(1,16)),
levels = 8)
load("tuned_grids/elastic_net_tune.rda")
load("tuned_grids/random_forest_tune.rda")
g1<-autoplot(elastic_net_tune) + ggtitle("Elastic Net") + theme_dark()
ggplotly(g1)
g2 <- autoplot(random_forest_tune)
pp2 <- ggplot(g2$data, aes(x = value, y = mean, group = `# Trees`, color = `# Trees`)) +
geom_path() +
geom_point(size = 1) +
facet_grid(`.metric` ~ `Minimal Node Size`, scales = "free_y",  labeller = label_both) +
labs(x = paste(unique(g2$data$name)),
y = "") +
ggtitle("Random Forest") +
theme_dark() +
theme(text = element_text(size = 6))
ggplotly(pp2)
random_forest_final_wflow <- select_best(random_forest_tune , metric="roc_auc" ) %>%
finalize_workflow(x=random_forest_wflow)
random_forest_fit  <- fit(random_forest_final_wflow , pokemon_train)
random_forest_fit %>% extract_fit_parsnip() %>%
vip()
set.seed(3435)
random_forest_test <- fit(random_forest_final_wflow, pokemon_test)
random_forest_test_res <- augment(random_forest_test, new_data = pokemon_test)
random_forest_test_res %>%
roc_curve(type_1 , c(.pred_Bug, .pred_Fire, .pred_Normal, .pred_Grass, .pred_Psychic, .pred_Water, .pred_Other) ) %>%
autoplot()
random_forest_test_res %>%
conf_mat(truth = type_1, estimate = .pred_class) %>%
autoplot(type = "heatmap")
abalone <- read.csv("data/abalone.csv")
abalone <- transform(abalone, age=rings+1.5)
abalone_split <- initial_split(abalone, prop = 0.7, strata = age)
abalone_train <- training(abalone_split)
abalone_test <- testing(abalone_split)
abalone_folds  <- vfold_cv(abalone_train, v = 5, strata = age)
abalone_recipe <- recipe(age ~ type + longest_shell + diameter +
height + whole_weight + shucked_weight +
viscera_weight + shell_weight,
data = abalone_train) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms= ~ starts_with("type"):shucked_weight) %>%
step_interact(terms= ~ longest_shell:diameter) %>%
step_interact(terms= ~ shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
prep(abalone_recipe) %>%
bake(new_data = abalone_train)
random_forest_model_abalone <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("regression")
random_forest_wflow_abalone <- workflow() %>%
add_model(random_forest_model_abalone) %>%
add_recipe(abalone_recipe)
random_forest_grid_abalone <- grid_regular(mtry(range = c(1, 7)),
trees(range = c(200,700)),
min_n(range = c(1,16)),
levels = 10)
load("tuned_grids/random_forest_tune.rda")
g2 <- autoplot(random_forest_tune_abalone) +    theme(text = element_text(size = 3))
pp2 <- ggplot(g2$data, aes(x = value, y = mean, group = `Minimal Node Size`, color = `Minimal Node Size`)) +
geom_path() +
geom_point(size = 1) +
facet_grid(`.metric` ~ `# Randomly Selected Predictors`, scales = "free_y",  labeller = label_both) +
labs(x = paste(unique(g2$data$name)),
y = "") +
ggtitle("Random Forest") +
theme_dark() +
theme(text = element_text(size = 6))
ggplotly(pp2)
random_forest_final_wflow_abalone <- select_best(random_forest_tune_abalone , metric="rmse" ) %>%
finalize_workflow(x=random_forest_wflow_abalone)
random_forest_fit_train_abalone  <- fit(random_forest_final_wflow_abalone , abalone_train)
abalone_training_results <- predict(random_forest_fit_train_abalone, new_data = abalone_train %>% select(-age)) %>%
bind_cols(abalone_train %>% select(age))
random_forest_fit_test_abalone  <- fit(random_forest_final_wflow_abalone , abalone_test)
abalone_testing_results <- predict(random_forest_fit_test_abalone, new_data = abalone_test %>% select(-age)) %>%
bind_cols(abalone_test %>% select(age))
tibble(dataset=c("RMSE", "R^2"),
training=c((abalone_training_results  %>% rmse( age, .pred))$.estimate,
(abalone_training_results  %>% rsq( age, .pred))$.estimate),
testing = c((abalone_testing_results  %>% rmse( age, .pred))$.estimate,
(abalone_testing_results  %>% rsq( age, .pred))$.estimate)
)
load("tuned_grids/random_forest_tune_abalone.rda")
g2 <- autoplot(random_forest_tune_abalone) +    theme(text = element_text(size = 3))
pp2 <- ggplot(g2$data, aes(x = value, y = mean, group = `Minimal Node Size`, color = `Minimal Node Size`)) +
geom_path() +
geom_point(size = 1) +
facet_grid(`.metric` ~ `# Randomly Selected Predictors`, scales = "free_y",  labeller = label_both) +
labs(x = paste(unique(g2$data$name)),
y = "") +
ggtitle("Random Forest") +
theme_dark() +
theme(text = element_text(size = 6))
ggplotly(pp2)
random_forest_final_wflow_abalone <- select_best(random_forest_tune_abalone , metric="rmse" ) %>%
finalize_workflow(x=random_forest_wflow_abalone)
random_forest_fit_train_abalone  <- fit(random_forest_final_wflow_abalone , abalone_train)
abalone_training_results <- predict(random_forest_fit_train_abalone, new_data = abalone_train %>% select(-age)) %>%
bind_cols(abalone_train %>% select(age))
random_forest_fit_test_abalone  <- fit(random_forest_final_wflow_abalone , abalone_test)
abalone_testing_results <- predict(random_forest_fit_test_abalone, new_data = abalone_test %>% select(-age)) %>%
bind_cols(abalone_test %>% select(age))
tibble(dataset=c("RMSE", "R^2"),
training=c((abalone_training_results  %>% rmse( age, .pred))$.estimate,
(abalone_training_results  %>% rsq( age, .pred))$.estimate),
testing = c((abalone_testing_results  %>% rmse( age, .pred))$.estimate,
(abalone_testing_results  %>% rsq( age, .pred))$.estimate)
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(ranger) # Random forests
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(vip)
library(yardstick)
library(themis)
library(janitor)
library(plotly) # Used in several of the rotating carousels for interactive plots
tidymodels_prefer()
conflicted::conflicts_prefer(yardstick::rsq)
set.seed(3435)
load("tuned_grids/random_forest_tune_abalone.rda")
g2 <- autoplot(random_forest_tune_abalone) +    theme(text = element_text(size = 3))
pp2 <- ggplot(g2$data, aes(x = value, y = mean, group = `Minimal Node Size`, color = `Minimal Node Size`)) +
geom_path() +
geom_point(size = 1) +
facet_grid(`.metric` ~ `# Randomly Selected Predictors`, scales = "free_y",  labeller = label_both) +
labs(x = paste(unique(g2$data$name)),
y = "") +
ggtitle("Random Forest") +
theme_dark() +
theme(text = element_text(size = 6))
ggplotly(pp2)
random_forest_final_wflow_abalone <- select_best(random_forest_tune_abalone , metric="rmse" ) %>%
finalize_workflow(x=random_forest_wflow_abalone)
random_forest_final_wflow_abalone
random_forest_fit_train_abalone  <- fit(random_forest_final_wflow_abalone , abalone_train)
abalone_training_results <- predict(random_forest_fit_train_abalone, new_data = abalone_train %>% select(-age)) %>%
bind_cols(abalone_train %>% select(age))
random_forest_fit_test_abalone  <- fit(random_forest_final_wflow_abalone , abalone_test)
abalone_testing_results <- predict(random_forest_fit_test_abalone, new_data = abalone_test %>% select(-age)) %>%
bind_cols(abalone_test %>% select(age))
tibble(dataset=c("RMSE", "R^2"),
training=c((abalone_training_results  %>% rmse( age, .pred))$.estimate,
(abalone_training_results  %>% rsq( age, .pred))$.estimate),
testing = c((abalone_testing_results  %>% rmse( age, .pred))$.estimate,
(abalone_testing_results  %>% rsq( age, .pred))$.estimate)
)
load("tuned_grids/random_forest_tune_abalone.rda")
g2 <- autoplot(random_forest_tune_abalone) +    theme(text = element_text(size = 3))
pp2 <- ggplot(g2$data, aes(x = value, y = mean, group = `Minimal Node Size`, color = `Minimal Node Size`)) +
geom_path() +
geom_point(size = 1) +
facet_grid(`.metric` ~ `# Randomly Selected Predictors`, scales = "free_y",  labeller = label_both) +
labs(x = paste(unique(g2$data$name)),
y = "") +
ggtitle("Random Forest") +
theme_dark() +
theme(text = element_text(size = 4))
ggplotly(pp2)
random_forest_final_wflow_abalone <- select_best(random_forest_tune_abalone , metric="rmse" ) %>%
finalize_workflow(x=random_forest_wflow_abalone)
random_forest_final_wflow_abalone
random_forest_fit_train_abalone  <- fit(random_forest_final_wflow_abalone , abalone_train)
abalone_training_results <- predict(random_forest_fit_train_abalone, new_data = abalone_train %>% select(-age)) %>%
bind_cols(abalone_train %>% select(age))
random_forest_fit_test_abalone  <- fit(random_forest_final_wflow_abalone , abalone_test)
abalone_testing_results <- predict(random_forest_fit_test_abalone, new_data = abalone_test %>% select(-age)) %>%
bind_cols(abalone_test %>% select(age))
tibble(dataset=c("RMSE", "R^2"),
training=c((abalone_training_results  %>% rmse( age, .pred))$.estimate,
(abalone_training_results  %>% rsq( age, .pred))$.estimate),
testing = c((abalone_testing_results  %>% rmse( age, .pred))$.estimate,
(abalone_testing_results  %>% rsq( age, .pred))$.estimate)
)
random_forest_final_wflow_abalone <- select_best(random_forest_tune_abalone , metric="rmse" ) %>%
finalize_workflow(x=random_forest_wflow_abalone)
random_forest_final_wflow_abalone
random_forest_fit_train_abalone  <- fit(random_forest_final_wflow_abalone , abalone_train)
abalone_training_results <- predict(random_forest_fit_train_abalone, new_data = abalone_train %>% select(-age)) %>%
bind_cols(abalone_train %>% select(age))
random_forest_fit_test_abalone  <- fit(random_forest_final_wflow_abalone , abalone_test)
abalone_testing_results <- predict(random_forest_fit_test_abalone, new_data = abalone_test %>% select(-age)) %>%
bind_cols(abalone_test %>% select(age))
tibble(dataset=c("RMSE", "R^2"),
training=c((abalone_training_results  %>% rmse( age, .pred))$.estimate,
(abalone_training_results  %>% rsq( age, .pred))$.estimate),
testing = c((abalone_testing_results  %>% rmse( age, .pred))$.estimate,
(abalone_testing_results  %>% rsq( age, .pred))$.estimate)
)
random_forest_final_wflow_abalone <- select_best(random_forest_tune_abalone , metric="rmse" ) %>%
finalize_workflow(x=random_forest_wflow_abalone)
random_forest_fit_train_abalone  <- fit(random_forest_final_wflow_abalone , abalone_train)
abalone_training_results <- predict(random_forest_fit_train_abalone, new_data = abalone_train %>% select(-age)) %>%
bind_cols(abalone_train %>% select(age))
random_forest_fit_test_abalone  <- fit(random_forest_final_wflow_abalone , abalone_test)
abalone_testing_results <- predict(random_forest_fit_test_abalone, new_data = abalone_test %>% select(-age)) %>%
bind_cols(abalone_test %>% select(age))
tibble(dataset=c("RMSE", "R^2"),
training=c((abalone_training_results  %>% rmse( age, .pred))$.estimate,
(abalone_training_results  %>% rsq( age, .pred))$.estimate),
testing = c((abalone_testing_results  %>% rmse( age, .pred))$.estimate,
(abalone_testing_results  %>% rsq( age, .pred))$.estimate)
)
pokemon_recipe <-
recipe(type_1 ~ legendary + generation + sp_atk + attack + speed + defense + hp + sp_def, data = pokemon_train) %>%
step_dummy(legendary) %>%
step_dummy(generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
prep(pokemon_recipe) %>% bake(new_data = pokemon_train)
